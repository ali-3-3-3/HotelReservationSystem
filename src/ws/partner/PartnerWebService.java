
package ws.partner;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PartnerWebService", targetNamespace = "http://ws.session.ejb/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PartnerWebService {


    /**
     * 
     * @param partnerId
     * @return
     *     returns java.util.List<ws.partner.Reservation>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewReservationsByPartnerId", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.ViewReservationsByPartnerId")
    @ResponseWrapper(localName = "viewReservationsByPartnerIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.ViewReservationsByPartnerIdResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/viewReservationsByPartnerIdRequest", output = "http://ws.session.ejb/PartnerWebService/viewReservationsByPartnerIdResponse")
    public List<Reservation> viewReservationsByPartnerId(
        @WebParam(name = "partnerId", targetNamespace = "")
        Long partnerId);

    /**
     * 
     * @param guestId
     * @return
     *     returns ws.partner.Guest
     * @throws GuestNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveGuestByGuestId", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.RetrieveGuestByGuestId")
    @ResponseWrapper(localName = "retrieveGuestByGuestIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.RetrieveGuestByGuestIdResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrieveGuestByGuestIdRequest", output = "http://ws.session.ejb/PartnerWebService/retrieveGuestByGuestIdResponse", fault = {
        @FaultAction(className = GuestNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrieveGuestByGuestId/Fault/GuestNotFoundException")
    })
    public Guest retrieveGuestByGuestId(
        @WebParam(name = "guestId", targetNamespace = "")
        Long guestId)
        throws GuestNotFoundException_Exception
    ;

    /**
     * 
     * @param password
     * @param email
     * @return
     *     returns ws.partner.Partner
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(name = "doLoginResponse", targetNamespace = "")
    @RequestWrapper(localName = "doLogin", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.DoLogin")
    @ResponseWrapper(localName = "doLoginResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.DoLoginResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/doLoginRequest", output = "http://ws.session.ejb/PartnerWebService/doLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/doLogin/Fault/InvalidLoginCredentialException")
    })
    public Partner doLogin(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @param checkOutDate
     * @param checkInDate
     * @return
     *     returns java.util.List<ws.partner.RoomType>
     * @throws RoomTypeNotFoundException_Exception
     * @throws InputDataValidationException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchRoom", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.SearchRoom")
    @ResponseWrapper(localName = "searchRoomResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.SearchRoomResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/searchRoomRequest", output = "http://ws.session.ejb/PartnerWebService/searchRoomResponse", fault = {
        @FaultAction(className = RoomTypeNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/searchRoom/Fault/RoomTypeNotFoundException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/searchRoom/Fault/InputDataValidationException")
    })
    public List<RoomType> searchRoom(
        @WebParam(name = "checkInDate", targetNamespace = "")
        XMLGregorianCalendar checkInDate,
        @WebParam(name = "checkOutDate", targetNamespace = "")
        XMLGregorianCalendar checkOutDate)
        throws InputDataValidationException_Exception, RoomTypeNotFoundException_Exception
    ;

    /**
     * 
     * @param checkIn
     * @param checkOut
     * @param roomType
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "calculatePre", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.CalculatePre")
    @ResponseWrapper(localName = "calculatePreResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.CalculatePreResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/calculatePreRequest", output = "http://ws.session.ejb/PartnerWebService/calculatePreResponse")
    public double calculatePre(
        @WebParam(name = "checkIn", targetNamespace = "")
        XMLGregorianCalendar checkIn,
        @WebParam(name = "checkOut", targetNamespace = "")
        XMLGregorianCalendar checkOut,
        @WebParam(name = "roomType", targetNamespace = "")
        RoomType roomType);

    /**
     * 
     * @param checkoutDate
     * @param checkinDate
     * @param noOfRoom
     * @param guestId
     * @param roomTypeId
     * @return
     *     returns ws.partner.Reservation
     * @throws UnknownPersistenceException_Exception
     * @throws InputDataValidationException_Exception
     * @throws InvalidRoomCountException_Exception
     * @throws RoomTypeUnavailableException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "reserveNewReservation", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.ReserveNewReservation")
    @ResponseWrapper(localName = "reserveNewReservationResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.ReserveNewReservationResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/reserveNewReservationRequest", output = "http://ws.session.ejb/PartnerWebService/reserveNewReservationResponse", fault = {
        @FaultAction(className = RoomTypeUnavailableException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/reserveNewReservation/Fault/RoomTypeUnavailableException"),
        @FaultAction(className = InvalidRoomCountException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/reserveNewReservation/Fault/InvalidRoomCountException"),
        @FaultAction(className = InputDataValidationException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/reserveNewReservation/Fault/InputDataValidationException"),
        @FaultAction(className = UnknownPersistenceException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/reserveNewReservation/Fault/UnknownPersistenceException")
    })
    public Reservation reserveNewReservation(
        @WebParam(name = "checkinDate", targetNamespace = "")
        String checkinDate,
        @WebParam(name = "checkoutDate", targetNamespace = "")
        String checkoutDate,
        @WebParam(name = "noOfRoom", targetNamespace = "")
        Integer noOfRoom,
        @WebParam(name = "roomTypeId", targetNamespace = "")
        Long roomTypeId,
        @WebParam(name = "guestId", targetNamespace = "")
        Long guestId)
        throws InputDataValidationException_Exception, InvalidRoomCountException_Exception, RoomTypeUnavailableException_Exception, UnknownPersistenceException_Exception
    ;

    /**
     * 
     * @param reservationId
     * @return
     *     returns ws.partner.Reservation
     * @throws ReservationNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrievePartnerReservationsByReservationId", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.RetrievePartnerReservationsByReservationId")
    @ResponseWrapper(localName = "retrievePartnerReservationsByReservationIdResponse", targetNamespace = "http://ws.session.ejb/", className = "ws.partner.RetrievePartnerReservationsByReservationIdResponse")
    @Action(input = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationsByReservationIdRequest", output = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationsByReservationIdResponse", fault = {
        @FaultAction(className = ReservationNotFoundException_Exception.class, value = "http://ws.session.ejb/PartnerWebService/retrievePartnerReservationsByReservationId/Fault/ReservationNotFoundException")
    })
    public Reservation retrievePartnerReservationsByReservationId(
        @WebParam(name = "reservationId", targetNamespace = "")
        Long reservationId)
        throws ReservationNotFoundException_Exception
    ;

}
